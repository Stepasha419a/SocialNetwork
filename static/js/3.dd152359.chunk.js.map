{"version":3,"sources":["Components/Profile/MyPosts/MyPosts.module.css","Components/Profile/MyPosts/Post/Post.module.css","Components/Profile/MyPosts/ProfileInfo/ProfileInfo.module.css","Components/Profile/MyPosts/ProfileInfo/ProfileStatus.module.css","Components/Profile/MyPosts/Post/Post.js","Components/Profile/MyPosts/ProfileInfo/MyPostForm/MyPostForm.js","Components/Profile/MyPosts/MyPosts.js","Components/Profile/MyPosts/MyPostsContainer.js","Components/Profile/MyPosts/ProfileInfo/ProfileStatusWithHooks.js","Components/Profile/MyPosts/ProfileInfo/ProfileDataForm.js","Components/Profile/MyPosts/ProfileInfo/ProfileInfo.js","Components/Profile/Profile.js","Components/Profile/ProfileContainer.js"],"names":["module","exports","Post","props","className","s","item","src","alt","message","likesCount","maxLength10","maxLengthCreator","MyPostReduxForm","reduxForm","form","handleSubmit","onSubmit","CreateField","required","Textarea","type","MyPosts","posts","addPost","postsElements","map","post","postsBlock","values","newPostText","MyPostsContainer","connect","state","profilePage","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","StatusBody","onDoubleClick","StatusSpan","autoFocus","onBlur","updateStatus","onChange","event","currentTarget","value","ProfileDataForm","profile","activateEditMode","onClick","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","ContactMaker","contact","link","ProfileInfo","isOwner","savePhoto","onTouch","setOnTouch","Preloader","descriptionBlock","touchBlock","photos","large","userPhoto","mainPhoto","spanBlock","infoBlock","target","files","length","toggleEditMode","myContacts","Object","keys","contacts","key","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshoot","React","Component","compose","auth","UserId","isAuth","withRouter"],"mappings":"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","file":"static/js/3.dd152359.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2WXhY\",\"posts\":\"MyPosts_posts__3gXdt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1R9gh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__b9bzy\",\"mainPhoto\":\"ProfileInfo_mainPhoto__2KKsi\",\"touchBlock\":\"ProfileInfo_touchBlock__2qfj1\",\"spanBlock\":\"ProfileInfo_spanBlock__u6fIb\",\"infoBlock\":\"ProfileInfo_infoBlock__XeJNY\",\"myContacts\":\"ProfileInfo_myContacts__29FD2\",\"toggleEditMode\":\"ProfileInfo_toggleEditMode__2VYSN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"StatusBody\":\"ProfileStatus_StatusBody__2FIKP\",\"StatusSpan\":\"ProfileStatus_StatusSpan__2SLCC\"};","import React from 'react'\r\nimport s from './Post.module.css'\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src='https://avatars.mds.yandex.net/get-ott/374297/2a000001616b87458162c9216ccd5144e94d/678x380' alt={'fail load'} />\r\n            {props.message}\r\n            <div>\r\n                <span>{props.likesCount} likes</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post","import React from 'react'\r\nimport { reduxForm } from 'redux-form'\r\nimport { maxLengthCreator, required } from '../../../../../utilits/validators/validators'\r\nimport { Textarea } from '../../../../common/FormsControls/FormsControls'\r\nimport { CreateField } from '../../../../common/FormsControls/FormsControls'\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst AddNewPostForm = ({ handleSubmit }) => {\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {CreateField(null, 'newPostText', [required, maxLength10], Textarea)}\r\n            <div>\r\n                <button type={'submit'}>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nlet MyPostReduxForm = reduxForm({\r\n    form: 'ProfileAddNewPostForm'\r\n})(AddNewPostForm)\r\n\r\nexport default MyPostReduxForm","import React from 'react'\r\nimport s from './MyPosts.module.css'\r\nimport Post from './Post/Post'\r\nimport MyPostReduxForm from './ProfileInfo/MyPostForm/MyPostForm'\r\n\r\nconst MyPosts = ({ posts, addPost }) => {\r\n\r\n    let postsElements = posts.map((post) => <Post message={post.message} likesCount={post.likesCount} />)\r\n\r\n    let onAddPost = (values) => {\r\n        addPost(values.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts:</h3>\r\n            <MyPostReduxForm onSubmit={onAddPost} />\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyPosts","import { addPost } from './../../../redux/profileReducer'\r\nimport MyPosts from './MyPosts'\r\nimport { connect } from 'react-redux'\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, { addPost })(MyPosts)\r\n\r\nexport default MyPostsContainer","import React, { useEffect, useState } from 'react'\r\nimport s from './ProfileStatus.module.css'\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const diactivateMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (event) => {\r\n        setStatus(event.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div className={s.StatusBody}>\r\n                    <span onDoubleClick={activateMode}><span className={s.StatusSpan}><b>Status</b>:</span> {props.status || 'Status is Undefinded'}</span>\r\n                </div>\r\n            }\r\n            {editMode\r\n                &&\r\n                <div>\r\n                    <span>edit status: </span>\r\n                    <input autoFocus={true} onBlur={diactivateMode} onChange={onStatusChange} value={status}></input>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks","import React from 'react'\r\nimport { CreateField } from '../../../common/FormsControls/FormsControls'\r\n\r\nconst ProfileDataForm = ({ profile, activateEditMode }) => {\r\n    return <form>\r\n        <div><button onClick={activateEditMode}>save edit</button></div>\r\n        <div>\r\n            <b>Full Name</b>: {profile.fullName} {CreateField()} //Создавали форму с помощью CreateField \r\n        </div>\r\n        <div>\r\n            <b>About me</b>: {profile.aboutMe}\r\n        </div>\r\n        <div>\r\n            {profile.lookingForAJob ? <div><b>Looking for a job</b></div> : <div><b>Not looking for a job</b></div>}\r\n        </div>\r\n        <div>{profile.lookingForAJob ? <div> <b>Description of the job you are looking for</b>: {profile.lookingForAJobDescription}</div> : null} </div>\r\n    </form>\r\n}\r\n\r\nexport default ProfileDataForm","import React, { useState } from 'react'\r\nimport s from './ProfileInfo.module.css'\r\nimport Preloader from '../../../common/Preloader/Preloader'\r\nimport userPhoto from '../../../../assets/images/defaultIcon.png'\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks'\r\nimport ProfileDataForm from './ProfileDataForm'\r\n\r\nconst ProfileInfo = ({ profile, status, updateStatus, isOwner, savePhoto }) => {\r\n\r\n    let [onTouch, setOnTouch] = useState(false)\r\n    let [editMode, setEditMode] = useState(false)\r\n\r\n    if (!profile) {\r\n        return (\r\n            <Preloader />\r\n        )\r\n    }\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const onMainPhotoSelected = (event) => {\r\n        if (event.target.files.length) {\r\n            savePhoto(event.target.files[0])\r\n        }\r\n    }\r\n\r\n    const activeAvatarChange = () => {\r\n        setOnTouch(true)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {editMode ? <ProfileDataForm profile={profile} activateEditMode={activateEditMode} /> :\r\n                <div>\r\n                    <div className={s.descriptionBlock}>\r\n                        <div className={s.touchBlock} onClick={activeAvatarChange} onBlur={null}>\r\n                            <img src={profile.photos.large || userPhoto} alt='fail load' className={s.mainPhoto} ></img>\r\n                            {isOwner && <span className={s.spanBlock}>Click to change avatar</span>}\r\n                        </div>\r\n                        <div className={s.infoBlock}>\r\n                            <div>\r\n                                <b>Full Name</b>: {profile.fullName}\r\n                            </div>\r\n                            {onTouch && isOwner && <input type={'file'} onChange={onMainPhotoSelected} />}\r\n                            <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\r\n                            <div>\r\n                                <b>About me</b>: {profile.aboutMe}\r\n                            </div>\r\n                            <div>\r\n                                {profile.lookingForAJob ? <div><b>Looking for a job</b></div> : <div><b>Not looking for a job</b></div>}\r\n                            </div>\r\n                            <div>{profile.lookingForAJob ? <div> <b>Description of the job you are looking for</b>: {profile.lookingForAJobDescription}</div> : null} </div>\r\n                            {isOwner && <div className={s.toggleEditMode}><button onClick={activateEditMode}>edit</button></div>}\r\n                        </div>\r\n                    </div>\r\n                    <div className={s.myContacts}>\r\n                        <b>My contacts</b>: {Object.keys(profile.contacts).map(key => { return <ContactMaker key={key} contact={key} link={profile.contacts[key]} /> })}\r\n                    </div>\r\n                </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ContactMaker = ({ contact, link }) => {\r\n    if (!link) {\r\n        return (\r\n            null\r\n        )\r\n    }\r\n    return (\r\n        <div>\r\n            <b>{contact}</b>: {link}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo","import React from 'react'\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer'\r\nimport ProfileInfo from './MyPosts/ProfileInfo/ProfileInfo'\r\n\r\nconst Profile = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo savePhoto={props.savePhoto} isOwner={props.isOwner} profile={props.profile} status={props.status} updateStatus={props.updateStatus} />\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport Profile from './Profile'\r\nimport { getUserProfile, getStatus, updateStatus, savePhoto } from '../../redux/profileReducer'\r\nimport { withRouter } from 'react-router-dom'\r\nimport { compose } from 'redux'\r\n\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshoot) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                isOwner={!this.props.match.params.userId}\r\n                profile={this.props.profile}\r\n                status={this.props.status}\r\n                updateStatus={this.props.updateStatus}\r\n                savePhoto={this.props.savePhoto} />\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.UserId,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, { getUserProfile, getStatus, updateStatus, savePhoto }),\r\n    withRouter\r\n)(ProfileContainer)"],"sourceRoot":""}