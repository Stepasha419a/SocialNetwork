{"version":3,"sources":["Components/Profile/MyPosts/ProfileInfo/ProfileInfo.module.css","Components/Profile/MyPosts/MyPosts.module.css","Components/Profile/MyPosts/Post/Post.module.css","Components/Profile/MyPosts/ProfileInfo/ProfileStatus.module.css","Components/Profile/MyPosts/Post/Post.js","Components/Profile/MyPosts/ProfileInfo/MyPostForm/MyPostForm.js","Components/Profile/MyPosts/MyPosts.js","Components/Profile/MyPosts/MyPostsContainer.js","Components/Profile/MyPosts/ProfileInfo/ProfileStatusWithHooks.js","Components/Profile/MyPosts/ProfileInfo/ProfileDataForm.js","Components/Profile/MyPosts/ProfileInfo/ProfileInfo.js","Components/Profile/Profile.js","Components/Profile/ProfileContainer.js"],"names":["module","exports","Post","props","className","s","item","src","alt","message","likesCount","maxLength10","maxLengthCreator","MyPostReduxForm","reduxForm","form","handleSubmit","onSubmit","CreateField","required","Textarea","type","MyPosts","posts","addPost","postsElements","map","post","id","postsBlock","values","newPostText","MyPostsContainer","connect","state","profilePage","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","StatusBody","onDoubleClick","StatusSpan","autoFocus","onBlur","updateStatus","onChange","event","currentTarget","value","checkboxClass","flexBox","formBlock","ProfileDataReduxForm","profile","error","input","Input","textarea","Object","keys","contacts","key","contact","formSummaryError","ContactMaker","link","ProfileInfo","isOwner","savePhoto","saveProfile","onTouch","setOnTouch","Preloader","initialValues","formData","then","descriptionBlock","touchBlock","onClick","photos","large","userPhoto","mainPhoto","spanBlock","infoBlock","fullName","target","files","length","aboutMe","lookingForAJob","lookingForAJobDescription","toggleEditMode","myContacts","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshoot","React","Component","compose","auth","UserId","isAuth","withRouter"],"mappings":"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","file":"static/js/3.dc0ae17a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__b9bzy\",\"mainPhoto\":\"ProfileInfo_mainPhoto__2KKsi\",\"touchBlock\":\"ProfileInfo_touchBlock__2qfj1\",\"spanBlock\":\"ProfileInfo_spanBlock__u6fIb\",\"infoBlock\":\"ProfileInfo_infoBlock__XeJNY\",\"toggleEditMode\":\"ProfileInfo_toggleEditMode__2VYSN\",\"form\":\"ProfileInfo_form___z0QT\",\"input\":\"ProfileInfo_input__1Zu_b\",\"flexBox\":\"ProfileInfo_flexBox__uXBam\",\"formBlock\":\"ProfileInfo_formBlock__3VNs_\",\"textarea\":\"ProfileInfo_textarea__3Xjmy\",\"contact\":\"ProfileInfo_contact__1Urfk\",\"formSummaryError\":\"ProfileInfo_formSummaryError__Y1ZEf\",\"myContacts\":\"ProfileInfo_myContacts__29FD2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2WXhY\",\"posts\":\"MyPosts_posts__3gXdt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1R9gh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"StatusBody\":\"ProfileStatus_StatusBody__2FIKP\",\"StatusSpan\":\"ProfileStatus_StatusSpan__2SLCC\"};","import React from 'react'\r\nimport s from './Post.module.css'\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src='https://avatars.mds.yandex.net/get-ott/374297/2a000001616b87458162c9216ccd5144e94d/678x380' alt={'fail load'} />\r\n            {props.message}\r\n            <div>\r\n                <span>{props.likesCount} likes</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post","import React from 'react'\r\nimport { reduxForm } from 'redux-form'\r\nimport { maxLengthCreator, required } from '../../../../../utilits/validators/validators'\r\nimport { Textarea } from '../../../../common/FormsControls/FormsControls'\r\nimport { CreateField } from '../../../../common/FormsControls/FormsControls'\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst AddNewPostForm = ({ handleSubmit }) => {\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {CreateField(null, 'newPostText', [required, maxLength10], Textarea)}\r\n            <div>\r\n                <button type={'submit'}>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nlet MyPostReduxForm = reduxForm({\r\n    form: 'ProfileAddNewPostForm'\r\n})(AddNewPostForm)\r\n\r\nexport default MyPostReduxForm","import React from 'react'\r\nimport s from './MyPosts.module.css'\r\nimport Post from './Post/Post'\r\nimport MyPostReduxForm from './ProfileInfo/MyPostForm/MyPostForm'\r\n\r\nconst MyPosts = ({ posts, addPost }) => {\r\n\r\n    let postsElements = posts.map((post) => <Post key={post.id} message={post.message} likesCount={post.likesCount} />)\r\n\r\n    let onAddPost = (values) => {\r\n        addPost(values.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts:</h3>\r\n            <MyPostReduxForm onSubmit={onAddPost} />\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyPosts","import { addPost } from './../../../redux/profileReducer'\r\nimport MyPosts from './MyPosts'\r\nimport { connect } from 'react-redux'\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, { addPost })(MyPosts)\r\n\r\nexport default MyPostsContainer","import React, { useEffect, useState } from 'react'\r\nimport s from './ProfileStatus.module.css'\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const diactivateMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (event) => {\r\n        setStatus(event.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div className={s.StatusBody}>\r\n                    <span onDoubleClick={activateMode}><span className={s.StatusSpan}><b>Status</b>:</span> {props.status || 'Status is Undefinded'}</span>\r\n                </div>\r\n            }\r\n            {editMode\r\n                &&\r\n                <div>\r\n                    <span>edit status: </span>\r\n                    <input autoFocus={true} onBlur={diactivateMode} onChange={onStatusChange} value={status}></input>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks","import React from 'react'\r\nimport { CreateField, Input, Textarea } from '../../../common/FormsControls/FormsControls'\r\nimport { reduxForm } from 'redux-form'\r\nimport s from './ProfileInfo.module.css'\r\n\r\n//const maxLength15 = maxLengthCreator(15)\r\n\r\nconst checkboxClass = s.flexBox + ' ' + s.formBlock\r\n\r\nconst ProfileDataForm = ({ profile, handleSubmit, error }) => {\r\n    return <form className={s.form} onSubmit={handleSubmit}>\r\n        <div className={s.formBlock}>\r\n            <b>Full Name</b>: <div className={s.input}>{CreateField('Full Name', 'fullName', [], Input)}</div>\r\n        </div>\r\n        <div className={s.formBlock}>\r\n            <b>About me</b>: <div className={s.input}>{CreateField('Describe self', 'aboutMe', [], Input)}</div>\r\n        </div>\r\n        <div className={checkboxClass}>\r\n            <b>Looking for a job</b> <div>{CreateField('', 'lookingForAJob', [], Input, { type: 'checkbox' })}</div>\r\n        </div>\r\n        <div className={s.formBlock}>\r\n            <span><b>Description of the <br /> job you are looking for</b>:</span> <div className={s.input}>{CreateField('Professional Skills', 'lookingForAJobDescription', [], Textarea, { className: s.textarea })}</div>\r\n        </div>\r\n        <div>\r\n            <b>My contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n                return <div className={s.contact} key={key}>\r\n                    <b>{key}:</b> {CreateField(key, 'contacts.' + key, [], Input)}\r\n                </div>\r\n            })}\r\n        </div>\r\n        {error &&\r\n            <div className={s.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n        <div><button>save edit</button></div>\r\n    </form>\r\n}\r\n\r\nconst ProfileDataReduxForm = reduxForm({\r\n    form: 'editProfile'\r\n})(ProfileDataForm)\r\n\r\nexport default ProfileDataReduxForm","import React, { useState } from 'react'\r\nimport s from './ProfileInfo.module.css'\r\nimport Preloader from '../../../common/Preloader/Preloader'\r\nimport userPhoto from '../../../../assets/images/defaultIcon.png'\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks'\r\nimport ProfileDataReduxForm from './ProfileDataForm'\r\n\r\nconst ProfileInfo = ({ profile, status, updateStatus, isOwner, savePhoto, saveProfile }) => {\r\n\r\n    let [onTouch, setOnTouch] = useState(false)\r\n    let [editMode, setEditMode] = useState(false)\r\n\r\n    if (!profile) {\r\n        return (\r\n            <Preloader />\r\n        )\r\n    }\r\n\r\n    const onSubmit = (formData) => {\r\n        saveProfile(formData).then(() => { setEditMode(false) })\r\n    }\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const onMainPhotoSelected = (event) => {\r\n        if (event.target.files.length) {\r\n            savePhoto(event.target.files[0])\r\n        }\r\n    }\r\n\r\n    const activeAvatarChange = () => {\r\n        setOnTouch(true)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {editMode ? <ProfileDataReduxForm initialValues={profile} profile={profile} onSubmit={onSubmit} /> :\r\n                <div>\r\n                    <div className={s.descriptionBlock}>\r\n                        <div className={s.touchBlock} onClick={activeAvatarChange} onBlur={null}>\r\n                            <img src={profile.photos.large || userPhoto} alt='fail load' className={s.mainPhoto} ></img>\r\n                            {isOwner && <span className={s.spanBlock}>Click to change avatar</span>}\r\n                        </div>\r\n                        <div className={s.infoBlock}>\r\n                            <div>\r\n                                <b>Full Name</b>: {profile.fullName}\r\n                            </div>\r\n                            {onTouch && isOwner && <input type={'file'} onChange={onMainPhotoSelected} />}\r\n                            <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\r\n                            <div>\r\n                                <b>About me</b>: {profile.aboutMe}\r\n                            </div>\r\n                            <div>\r\n                                {profile.lookingForAJob ? <div><b>Looking for a job</b></div> : <div><b>Not looking for a job</b></div>}\r\n                            </div>\r\n                            <div>\r\n                                <b>Description of the job you are looking for</b>: {profile.lookingForAJobDescription}\r\n                            </div>\r\n                            {isOwner && <div className={s.toggleEditMode}><button onClick={activateEditMode}>edit</button></div>}\r\n                        </div>\r\n                    </div>\r\n                    <div className={s.myContacts}>\r\n                        <b>My contacts</b>: {Object.keys(profile.contacts).map(key => { return <ContactMaker key={key} contact={key} link={profile.contacts[key]} /> })}\r\n                    </div>\r\n                </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ContactMaker = ({ contact, link }) => {\r\n    if (!link) {\r\n        return (\r\n            null\r\n        )\r\n    }\r\n    return (\r\n        <div>\r\n            <b>{contact}</b>: {link}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo","import React from 'react'\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer'\r\nimport ProfileInfo from './MyPosts/ProfileInfo/ProfileInfo'\r\n\r\nconst Profile = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo savePhoto={props.savePhoto} isOwner={props.isOwner} profile={props.profile} status={props.status} updateStatus={props.updateStatus} saveProfile={props.saveProfile} />\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport Profile from './Profile'\r\nimport { getUserProfile, getStatus, updateStatus, savePhoto, saveProfile } from '../../redux/profileReducer'\r\nimport { withRouter } from 'react-router-dom'\r\nimport { compose } from 'redux'\r\n\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshoot) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                isOwner={!this.props.match.params.userId}\r\n                profile={this.props.profile}\r\n                status={this.props.status}\r\n                updateStatus={this.props.updateStatus}\r\n                savePhoto={this.props.savePhoto}\r\n                saveProfile={this.props.saveProfile} />\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.UserId,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, { getUserProfile, getStatus, updateStatus, savePhoto, saveProfile }),\r\n    withRouter\r\n)(ProfileContainer)"],"sourceRoot":""}