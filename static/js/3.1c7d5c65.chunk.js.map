{"version":3,"sources":["Components/Profile/MyPosts/MyPosts.module.css","Components/Profile/MyPosts/Post/Post.module.css","Components/Profile/MyPosts/ProfileInfo/ProfileInfo.module.css","Components/Profile/MyPosts/ProfileInfo/ProfileStatus.module.css","Components/Profile/MyPosts/Post/Post.js","Components/Profile/MyPosts/ProfileInfo/MyPostForm/MyPostForm.js","Components/Profile/MyPosts/MyPosts.js","Components/Profile/MyPosts/MyPostsContainer.js","Components/Profile/MyPosts/ProfileInfo/ProfileStatusWithHooks.js","Components/Profile/MyPosts/ProfileInfo/ProfileInfo.js","Components/Profile/Profile.js","Components/Profile/ProfileContainer.js"],"names":["module","exports","Post","props","className","s","item","src","alt","message","likesCount","maxLength10","maxLengthCreator","MyPostReduxForm","reduxForm","form","handleSubmit","onSubmit","CreateField","required","Textarea","type","MyPosts","posts","addPost","postsElements","map","post","postsBlock","values","newPostText","MyPostsContainer","connect","state","profilePage","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","StatusBody","onDoubleClick","StatusSpan","autoFocus","onBlur","updateStatus","onChange","event","currentTarget","value","contactMaker","contact","link","ProfileInfo","profile","isOwner","savePhoto","onTouch","setOnTouch","Preloader","descriptionBlock","touchBlock","onClick","photos","large","userPhoto","mainPhoto","spanBlock","fullName","target","files","length","aboutMe","lookingForAJob","lookingForAJobDescription","contacts","facebook","website","vk","twitter","instagram","youtube","github","mainLink","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshoot","React","Component","compose","auth","UserId","isAuth","withRouter"],"mappings":"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","file":"static/js/3.1c7d5c65.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2WXhY\",\"posts\":\"MyPosts_posts__3gXdt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1R9gh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__b9bzy\",\"mainPhoto\":\"ProfileInfo_mainPhoto__2KKsi\",\"touchBlock\":\"ProfileInfo_touchBlock__2qfj1\",\"spanBlock\":\"ProfileInfo_spanBlock__u6fIb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"StatusBody\":\"ProfileStatus_StatusBody__2FIKP\",\"StatusSpan\":\"ProfileStatus_StatusSpan__2SLCC\"};","import React from 'react'\r\nimport s from './Post.module.css'\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src='https://avatars.mds.yandex.net/get-ott/374297/2a000001616b87458162c9216ccd5144e94d/678x380' alt={'fail load'} />\r\n            {props.message}\r\n            <div>\r\n                <span>{props.likesCount} likes</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post","import React from 'react'\r\nimport { reduxForm } from 'redux-form'\r\nimport { maxLengthCreator, required } from '../../../../../utilits/validators/validators'\r\nimport { Textarea } from '../../../../common/FormsControls/FormsControls'\r\nimport { CreateField } from '../../../../common/FormsControls/FormsControls'\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst AddNewPostForm = ({ handleSubmit }) => {\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {CreateField(null, 'newPostText', [required, maxLength10], Textarea)}\r\n            <div>\r\n                <button type={'submit'}>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nlet MyPostReduxForm = reduxForm({\r\n    form: 'ProfileAddNewPostForm'\r\n})(AddNewPostForm)\r\n\r\nexport default MyPostReduxForm","import React from 'react'\r\nimport s from './MyPosts.module.css'\r\nimport Post from './Post/Post'\r\nimport MyPostReduxForm from './ProfileInfo/MyPostForm/MyPostForm'\r\n\r\nconst MyPosts = ({ posts, addPost }) => {\r\n\r\n    let postsElements = posts.map((post) => <Post message={post.message} likesCount={post.likesCount} />)\r\n\r\n    let onAddPost = (values) => {\r\n        addPost(values.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <MyPostReduxForm onSubmit={onAddPost} />\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyPosts","import { addPost } from './../../../redux/profileReducer'\r\nimport MyPosts from './MyPosts'\r\nimport { connect } from 'react-redux'\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, { addPost })(MyPosts)\r\n\r\nexport default MyPostsContainer","import React, { useEffect, useState } from 'react'\r\nimport s from './ProfileStatus.module.css'\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const diactivateMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (event) => {\r\n        setStatus(event.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div className={s.StatusBody}>\r\n                    <span onDoubleClick={activateMode}><span className={s.StatusSpan}>Status:</span> {props.status || 'Status is Undefinded'}</span>\r\n                </div>\r\n            }\r\n            {editMode\r\n                &&\r\n                <div>\r\n                    <span>edit status: </span>\r\n                    <input autoFocus={true} onBlur={diactivateMode} onChange={onStatusChange} value={status}></input>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks","import React, { useState } from 'react'\r\nimport s from './ProfileInfo.module.css'\r\nimport Preloader from '../../../common/Preloader/Preloader'\r\nimport userPhoto from '../../../../assets/images/defaultIcon.png'\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks'\r\n\r\nconst contactMaker = (contact, link) => {\r\n    if (!link) {\r\n        return (\r\n            null\r\n        )\r\n    }\r\n    return (\r\n        <div>\r\n            {contact}: {link}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ProfileInfo = ({ profile, status, updateStatus, isOwner, savePhoto }) => {\r\n\r\n    let [onTouch, setOnTouch] = useState(false)\r\n\r\n    if (!profile) {\r\n        return (\r\n            <Preloader />\r\n        )\r\n    }\r\n\r\n    const onMainPhotoSelected = (event) => {\r\n        if (event.target.files.length) {\r\n            savePhoto(event.target.files[0])\r\n        }\r\n    }\r\n\r\n    const activeAvatarChange = () => {\r\n        setOnTouch(true)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {/* <div>\r\n                <img src='https://i.pinimg.com/originals/eb/22/6c/eb226c61b2925659cfd02f6b38ccf921.jpg' alt={'fail load'}></img>\r\n            </div> */}\r\n            <div className={s.descriptionBlock}>\r\n                <div className={s.touchBlock} onClick={activeAvatarChange}>\r\n                    <img src={profile.photos.large || userPhoto} alt='fail load' className={s.mainPhoto} ></img>\r\n                    {isOwner && <span className={s.spanBlock}>Click to <br /> change avatar</span>}\r\n                </div>\r\n                <div>\r\n                    <div>\r\n                        {profile.fullName}\r\n                    </div>\r\n                    <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\r\n                    {onTouch && isOwner && <input type={'file'} onChange={onMainPhotoSelected} />}\r\n                    <div>\r\n                        about me: {profile.aboutMe}\r\n                    </div>\r\n                    <div>\r\n                        {profile.lookingForAJob ? <div>Finding a work</div> : <div>It's finding a work</div>}\r\n                    </div>\r\n                    <div>{profile.lookingForAJob ? <div> Description for a finding work: {profile.lookingForAJobDescription}</div> : null} </div>\r\n                    <div>\r\n                        My contacts:\r\n                        {contactMaker('facebook', profile.contacts.facebook)}\r\n                        {contactMaker('website', profile.contacts.website)}\r\n                        {contactMaker('vk', profile.contacts.vk)}\r\n                        {contactMaker('twitter', profile.contacts.twitter)}\r\n                        {contactMaker('instagram', profile.contacts.instagram)}\r\n                        {contactMaker('youtube', profile.contacts.youtube)}\r\n                        {contactMaker('github', profile.contacts.github)}\r\n                        {contactMaker('mainLink', profile.contacts.mainLink)}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo","import React from 'react'\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer'\r\nimport ProfileInfo from './MyPosts/ProfileInfo/ProfileInfo'\r\n\r\nconst Profile = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo savePhoto={props.savePhoto} isOwner={props.isOwner} profile={props.profile} status={props.status} updateStatus={props.updateStatus} />\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport Profile from './Profile'\r\nimport { getUserProfile, getStatus, updateStatus, savePhoto } from '../../redux/profileReducer'\r\nimport { withRouter } from 'react-router-dom'\r\nimport { compose } from 'redux'\r\n\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshoot) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                isOwner={!this.props.match.params.userId}\r\n                profile={this.props.profile}\r\n                status={this.props.status}\r\n                updateStatus={this.props.updateStatus}\r\n                savePhoto={this.props.savePhoto} />\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.UserId,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, { getUserProfile, getStatus, updateStatus, savePhoto }),\r\n    withRouter\r\n)(ProfileContainer)"],"sourceRoot":""}